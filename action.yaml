name: 'Rearm submit metadata'
description: 'Submit Release metadata for a release on Rearm'
branding:
  icon: 'info'
  color: 'green'
inputs:
  rearm_api_id:
    description: "Rearm Hub API ID"
    required: true
  rearm_api_key:
    description: "Rearm Hub API KEY"
    required: true
  image_full_name:
    description: "Full name of the Docker image with registry prefix"
    required: true
  image_digest:
    description: "SHA 256 digest of the image artifact"
    required: true
  rearm_build_start:
    description: "Build start time"
    required: true
  rearm_short_version:
    description: "Docker and filesystem safe version from Rearm for this release"
    required: true
  rearm_full_version:
    description: "Version obtained from Rearm for this release"
    required: true
  rearm_build_status:
    description: "Build status - [complete | rejected]"
    required: true
  rearm_api_url:
    description: "Rearm Hub API URL"
    required: false
    default: 'https://dev.rearmhq.com'
  deliverable_type:
    description: "Type of artifact created by this release [CONTAINER, FILE]"
    required: false
    default: 'CONTAINER'
  commit_list:
    description: "List of commits"
    required: false
  rearm_component_id:
    description: "Component UUID for this release if org-wide key is used"
    required: false
  enable_sbom:
    required: false
    default: 'false'
    description: "Generates SBOM and stores it along with the artifact"
  source_code_sbom_type:
    required: false
    default: 'none'
    description: "Generates SBOM based on source code analysis, possible values: npm, helm, custom, other, none. Use 'custom' to follow Dockerfile.sbom with expected output in /sbom/sbom.json"
  registry_username:
    description: "Username for image registry"
    required: false
  registry_password:
    description: "Password for image registry"
    required: false
  registry_host:
    description: "Host for image registry"
    default: null
    required: false
  finalize_release:
    description: "Finalize the release after adding it (true/false)"
    required: false
    default: 'false'
  path:
    description: "Path to the relative to root of the repo (default is '.')"
    required: false
    default: .
  send_sce_data:
    description: "Sends Source Code entry data along with the release, required for SCE SBOMs"
    required: false
    default: 'true'
  last_commit: 
    description: "Last registered commit"
    required: false
  enable_public_cosign_sigstore:
    required: false
    default: 'false'
    description: "Sign deliverables and SBOMs using public sigstore via cosign"
  enable_codeql:
    required: false
    default: 'false'
    description: "Enable CodeQL analysis"
  codeql_language:
    required: false
    default: 'none'
    description: "Language to analyze with CodeQL, use 'custom' to follow Dockerfile.sarif with expected output in /sarif/results.sarif"
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 500
    - name: Instantiate Rearm status
      shell: bash
      run: |
        cd ${{ inputs.path }}
        echo "" > rearm_command
        echo -n "--lifecycle ${{inputs.rearm_build_status}} " >> rearm_command

    - id: setup-node-js
      if: ${{ inputs.enable_sbom == 'true' }}
      name: Setup Node JS
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: 22
    - name: Login to DockerHub
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      if: ${{ inputs.enable_sbom == 'true' && inputs.registry_host == null }}
      with:
        username: ${{inputs.registry_username}}
        password: ${{inputs.registry_password}}
    - name: Login to Docker Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      if: ${{ inputs.enable_sbom == 'true' && inputs.registry_host != null }}
      with:
        registry: ${{inputs.registry_host}}
        username: ${{inputs.registry_username}}
        password: ${{inputs.registry_password}}
    - id: docker-pull-save
      name: Pull and Save Docker Image as tar
      shell: bash
      if: ${{ inputs.enable_sbom == 'true' && inputs.deliverable_type == 'CONTAINER' }}
      run: |
        cd ${{ inputs.path }}
        docker pull ${{inputs.image_full_name}}@${{inputs.image_digest}}
        docker save -o docker-${{inputs.rearm_short_version}}.tar ${{inputs.image_full_name}}@${{inputs.image_digest}} 
    - id: install-cdxgen
      if: ${{ inputs.enable_sbom == 'true' && inputs.source_code_sbom_type != 'none' && inputs.source_code_sbom_type != 'custom' }}
      name: Install cdxgen cli
      shell: bash
      run: npm install -g @cyclonedx/cdxgen@11.7.0
    - id: install-cosign
      if: ${{ inputs.enable_public_cosign_sigstore == 'true' }}
      name: Install Cosign
      uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1
    - id: cosign-sign
      if: ${{ inputs.enable_public_cosign_sigstore == 'true' }}
      name: Sign with cosign
      shell: bash
      run: |
        cd ${{ inputs.path }}
        cosign sign -y --output-payload deliverable-cosign.sigpl --output-signature deliverable-cosign.sig --output-certificate deliverable-cosign.cert ${{inputs.image_full_name}}@${{inputs.image_digest}}
    - name: Set sce data
      shell: bash
      if: ${{ inputs.send_sce_data == 'true' }}
      run: |
        cd ${{ inputs.path }}
        git pull
        if [ ! -z "${{inputs.last_commit}}" ] && [ "null" != "${{inputs.last_commit}}" ]
        then
          echo -n "--commits $(git log ${{inputs.last_commit}}..$(git log -1 --pretty='%H') --date=iso-strict --pretty='%H|||%ad|||%s|||%an|||%ae' -- ./ | base64 -w 0) "  >> rearm_command
        elif [ ! -z ${{inputs.commit_list}} ]
        then
          echo -n "--commits ${{inputs.commit_list}} " >> rearm_command
        else
          echo -n "--commits $(git log -1 --date=iso-strict --pretty='%H|||%ad|||%s|||%an|||%ae' -- ./ | base64 -w 0) "  >> rearm_command
        fi
        echo -n "--commit $(git log -1 --pretty='%H') --commitmessage \"$(git log -1 --pretty='%s')\" --date $(git log -1 --date=iso-strict --pretty='%ad') --vcstype git --vcsuri github.com/${{github.repository}} " >> rearm_command
    - name: Initialize CodeQL
      if: ${{ inputs.enable_codeql == 'true' && inputs.codeql_language != 'custom'}}
      uses: github/codeql-action/init@e96e340c1e95e91449de06aabfa9525b7b98113f # CodeQL Bundle v2.22.4
      with:
        languages: ${{ inputs.codeql_language }}
        source-root: ${{ inputs.path }}
    - name: Run Containerized SAST
      if: ${{ inputs.enable_codeql == 'true' && inputs.codeql_language == 'custom'}}
      shell: bash
      run: |
        cd ${{ inputs.path }}
        mkdir codeql-results
        docker build -t sarif-container -f Dockerfile.sarif .
        docker run -d --name sarif-container --rm --entrypoint sleep sarif-container 60
        sleep 3
        docker cp sarif-container:/sarif/results.sarif ./codeql-results/${{inputs.codeql_language}}.sarif
    - name: Run CodeQL
      if: ${{ inputs.enable_codeql == 'true' && inputs.codeql_language != 'custom'}}
      uses: github/codeql-action/analyze@e96e340c1e95e91449de06aabfa9525b7b98113f # CodeQL Bundle v2.22.4
      with:
        upload: false
        output: ${{ inputs.path }}/codeql-results
    - name: Verify CodeQL output present
      if: ${{ inputs.enable_codeql == 'true' }}
      shell: bash
      run: |
        du -h ${{ inputs.path }}/codeql-results/${{inputs.codeql_language}}.sarif
    #- name: Get Syft
    #  if: ${{ inputs.enable_sbom == 'true' && inputs.deliverable_type == 'CONTAINER' }}
    #  uses: anchore/sbom-action/download-syft@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0.20.5
    #  with:
    #    syft-version: v1.32.0
    - name: Submit metadata to Rearm
      shell: bash
      run: |
        cd ${{ inputs.path }}
        # establish purl
        url4purl=oci://${{inputs.image_full_name}}:${{inputs.rearm_short_version}}
        docker pull registry.relizahub.com/library/url2purl-cli:25.07.0@sha256:05f849cfedbc31c6c8d11819e42efb4eb5e95198696978ca1ad84b010d52e952
        purl=$(docker run --rm registry.relizahub.com/library/url2purl-cli:25.07.0@sha256:05f849cfedbc31c6c8d11819e42efb4eb5e95198696978ca1ad84b010d52e952 $url4purl)
        echo "deliverable purl=$purl"

        # Generate SBOMs if Enabled
        export FETCH_LICENSE=true
        if [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.source_code_sbom_type}} == 'npm' ]]
        then
          npm install --global @cyclonedx/cyclonedx-npm@4.0.0
          npm ci
          cyclonedx-npm --flatten-components > fs.cdx.bom.json
        elif [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.source_code_sbom_type}} == 'helm' ]]
        then
          cdxgen ./ --project-version "${{ inputs.rearm_full_version }}" --lifecyle build -t helm -o fs.cdx.bom.json
        elif [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.source_code_sbom_type}} == 'other' ]]
        then      
          cdxgen ./ --project-version "${{ inputs.rearm_full_version }}" --lifecycle build -o fs.cdx.bom.json
        elif [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.source_code_sbom_type}} == 'custom' ]]
        then
          docker build -t sbom-container -f Dockerfile.sbom --build-arg VERSION="${{inputs.rearm_full_version}}" .
          docker run -d --name sbom-container --rm --entrypoint sleep sbom-container 60
          sleep 3
          docker cp sbom-container:/sbom/sbom.json ./fs.cdx.bom.json
        fi
        if [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.source_code_sbom_type}} != 'none' ]]
        then
          du -h ./fs.cdx.bom.json
          
          # Build scearts JSON array
          scearts='[{"bomFormat": "CYCLONEDX","type": "BOM","filePath": "./fs.cdx.bom.json"'
          
          # Add cosign artifacts if enabled
          if [[ ${{ inputs.enable_public_cosign_sigstore}} == 'true' ]]
          then
            cosign sign-blob -y --output-signature fs-bom-cosign.sig --output-certificate fs-bom-cosign.cert ./fs.cdx.bom.json
            scearts+=', "artifacts": [{"type": "SIGNATURE","filePath": "./fs-bom-cosign.sig"},{"type": "CERTIFICATE_X_509","filePath": "./fs-bom-cosign.cert"}]'
          fi
          
          scearts+='}'
          
          # Add CodeQL SARIF artifact if enabled
          if [[ ${{ inputs.enable_codeql }} == 'true' ]]
          then
            scearts+=',{"type": "SARIF","filePath": "./codeql-results/${{inputs.codeql_language}}.sarif"}'
          fi
          
          scearts+=']'
          
          echo -n "--scearts '${scearts}' " >> rearm_command
        fi
        
        if [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.deliverable_type}} == 'CONTAINER' ]]
        then
          # export FETCH_LICENSE=true
          # export CDXGEN_DEBUG_MODE=debug
          cdxgen docker-${{inputs.rearm_short_version}}.tar -t docker --lifecycle build --project-version "${{ inputs.rearm_full_version }}" -o docker.cdx.bom.raw.json
          # docker run --rm -u root -e FETCH_LICENSE=true -v $(pwd):/app:rw ghcr.io/cyclonedx/cdxgen:v11.7.0@sha256:f33f2a067a419d599eb31a0dd007bc5d40eea7e1da64d9316024f1083fec16fa /app/docker-${{inputs.rearm_short_version}}.tar -t docker --lifecycle build -o /app/docker.cdx.bom.raw.json
          # syft ${{inputs.image_full_name}}@${{inputs.image_digest}} -o cyclonedx-json > ./docker.cdx.bom.raw.json
          du -h ./docker.cdx.bom.raw.json
          rearm bomutils fixpurl -f ./docker.cdx.bom.raw.json -o ./docker.cdx.bom.json --newpurl "${purl}"
          if [[ ${{ inputs.enable_public_cosign_sigstore}} == 'true' ]]
          then
            cosign sign-blob -y --output-signature docker-cdx-bom-cosign.sig --output-certificate docker-cdx-bom-cosign.cert ./docker.cdx.bom.json
            echo -n "--odelartsjson '[{\"bomFormat\": \"CYCLONEDX\",\"type\": \"BOM\",\"filePath\": \"./docker.cdx.bom.json\", \"artifacts\": [{\"type\": \"SIGNATURE\",\"filePath\": \"./docker-cdx-bom-cosign.sig\"},{\"type\": \"CERTIFICATE_X_509\",\"filePath\": \"./docker-cdx-bom-cosign.cert\"}]},{\"type\": \"SIGNED_PAYLOAD\",\"filePath\": \"./deliverable-cosign.sigpl\"},{\"type\": \"SIGNATURE\",\"filePath\": \"./deliverable-cosign.sig\"},{\"type\": \"CERTIFICATE_X_509\",\"filePath\": \"./deliverable-cosign.cert\"}]' " >> rearm_command
          else
            echo -n "--odelartsjson '[{\"bomFormat\": \"CYCLONEDX\",\"type\": \"BOM\",\"filePath\": \"./docker.cdx.bom.json\"}]' " >> rearm_command
          fi
        fi
        echo -n "-b ${{github.ref_name}} -k ${{ inputs.rearm_api_key }} \
          -i ${{ inputs.rearm_api_id }} -u ${{ inputs.rearm_api_url }} \
          -v \"${{ inputs.rearm_full_version }}\" " >> rearm_command
        echo -n "--odelid ${{inputs.image_full_name}} " >> rearm_command
        echo -n "--odelbuildid github${{github.action}}${{github.sha}} " >> rearm_command
        echo -n "--odelbuilduri https://github.com/${{github.repository}}/actions/runs/${{github.run_id}} " >> rearm_command
        echo -n "--odelidentifiers \"PURL:${purl}\" " >> rearm_command
        echo -n '--odelcimeta "GitHub Actions" ' >> rearm_command
        echo -n "--odeltype ${{inputs.deliverable_type}} " >> rearm_command

        if [[ ${{inputs.image_digest}} != "" ]]
        then
          echo -n "--odeldigests ${{inputs.image_digest}} " >> rearm_command
        fi
        if [ ! -z ${{inputs.rearm_component_id}} ]
        then
          echo -n "--component ${{inputs.rearm_component_id}} " >> rearm_command
        fi
        echo -n "--datestart ${{inputs.rearm_build_start}} " >> rearm_command
        echo -n "--dateend $(date -Iseconds) " >> rearm_command
        # debug
        cat rearm_command
        # send data
        echo rearm addrelease $(cat rearm_command) > rlz_cmd_exec
        # Run rearm addrelease and capture output

        if rearm_output=$(eval $(cat rlz_cmd_exec) 2>&1); then
          echo "Success: $rearm_output"
        else
          exit_code=$?
          echo "Error (exit code $exit_code): $rearm_output"
          exit $exit_code
        fi

        # Extract UUID from JSON output using jq
        release_uuid=$(echo "$rearm_output" | jq -r '.data.addReleaseProgrammatic.uuid // empty')
        echo "Extracted release UUID: $release_uuid"

        # Conditionally finalize release
        if [[ "${{ inputs.finalize_release }}" == 'true' && -n "$release_uuid" ]]; then
          echo "Finalizing release with UUID: $release_uuid"
          rearm releasefinalizer --releaseid $release_uuid -u ${{ inputs.rearm_api_url }} -i ${{ inputs.rearm_api_id }} -k ${{ inputs.rearm_api_key }}
        else
          echo "Skipping release finalization."
        fi
        echo "completed sending release metadata"

    - name: Fail build if rearm status is rejected
      shell: bash
      run: |
        echo "checking build status..."
        cd ${{ inputs.path }}
        if [[ "${{inputs.rearm_build_status}}" == "REJECTED" ]]
        then
          echo "Failing build since Rearm build Lifecycle is rejected"
          exit 1
        fi
