name: 'Rearm submit metadata'
description: 'Submit Release metadata for a release on Rearm'
branding:
  icon: 'info'
  color: 'green'
inputs:
  rearm_api_id:
    description: "Rearm Hub API ID"
    required: true
  rearm_api_key:
    description: "Rearm Hub API KEY"
    required: true
  image_full_name:
    description: "Full name of the Docker image with registry prefix"
    required: true
  image_digest:
    description: "SHA 256 digest of the image artifact"
    required: true
  rearm_build_start:
    description: "Build start time"
    required: true
  rearm_short_version:
    description: "Docker and filesystem safe version from Rearm for this release"
    required: true
  rearm_full_version:
    description: "Version obtained from Rearm for this release"
    required: true
  rearm_build_status:
    description: "Build status - [complete | rejected]"
    required: true
  rearm_api_url:
    description: "Rearm Hub API URL"
    required: false
    default: 'https://dev.rearmhq.com'
  deliverable_type:
    description: "Type of artifact created by this release [CONTAINER, FILE]"
    required: false
    default: 'CONTAINER'
  commit_list:
    description: "List of commits"
    required: false
  rearm_component_id:
    description: "Component UUID for this release if org-wide key is used"
    required: false
  enable_sbom:
    required: false
    default: 'false'
    description: "Generates SBOM and stores it along with the artifact"
  source_code_sbom_type:
    required: false
    default: 'none'
    description: "Generates SBOM based on source code analysis, possible values: npm, other, none"
  registry_username:
    description: "Username for image registry"
    required: false
  registry_password:
    description: "Password for image registry"
    required: false
  registry_host:
    description: "Host for image registry"
    default: null
    required: false
  path:
    description: "Path to the relative to root of the repo (default is '.')"
    required: false
    default: .
  send_sce_data:
    description: "Sends Source Code entry data along with the release, required for SCE SBOMs"
    required: false
    default: 'true'
  last_commit: 
    description: "Last registered commit"
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 200
    - name: Instantiate Rearm status
      shell: bash
      run: |
        cd ${{ inputs.path }}
        echo "" > rearm_command
        echo -n "--lifecycle ${{inputs.rearm_build_status}} " >> rearm_command

    - id: setup-node-js
      if: ${{ inputs.enable_sbom == 'true' }}
      name: Setup Node JS
      uses: actions/setup-node@v4
      with:
        node-version: 22
    - name: Login to DockerHub
      uses: docker/login-action@v3
      if: ${{ inputs.enable_sbom == 'true' && inputs.registry_host == null }}
      with:
        username: ${{inputs.registry_username}}
        password: ${{inputs.registry_password}}
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      if: ${{ inputs.enable_sbom == 'true' && inputs.registry_host != null }}
      with:
        registry: ${{inputs.registry_host}}
        username: ${{inputs.registry_username}}
        password: ${{inputs.registry_password}}
    - id: docker-pull-save
      name: Pull and Save Docker Image as tar
      shell: bash
      if: ${{ inputs.enable_sbom == 'true' && inputs.deliverable_type == 'CONTAINER' }}
      run: |
        cd ${{ inputs.path }}
        docker pull ${{inputs.image_full_name}}@${{inputs.image_digest}}
        docker save -o docker-${{inputs.rearm_short_version}}.tar ${{inputs.image_full_name}}@${{inputs.image_digest}} 
    - id: install-cdxgen
      if: ${{ inputs.enable_sbom == 'true' }}
      name: Install cdxgen cli
      shell: bash
      run: npm install -g @cyclonedx/cdxgen@11.3.0
    - id: install-cosign
      name: Install Cosign
      uses: sigstore/cosign-installer@v3.8.2
    - id: cosign-sign
      name: Sign with cosign
      shell: bash
      run: |
        cd ${{ inputs.path }}
        cosign sign -y --output-payload deliverable-cosign.sigpl --output-signature deliverable-cosign.sig --output-certificate deliverable-cosign.cert ${{inputs.image_full_name}}@${{inputs.image_digest}}
    - name: Set sce data
      shell: bash
      if: ${{ inputs.send_sce_data == 'true' }}
      run: |
        cd ${{ inputs.path }}
        if [ ! -z "${{inputs.last_commit}}" ] && [ "null" != "${{inputs.last_commit}}" ]
        then
          echo -n "--commits $(git log ${{inputs.last_commit}}..${{github.sha}} --date=iso-strict --pretty='%H|||%ad|||%s|||%an|||%ae' -- ./ | base64 -w 0) "  >> rearm_command
        elif [ ! -z ${{inputs.commit_list}} ]
        then
          echo -n "--commits ${{inputs.commit_list}} " >> rearm_command
        fi
        echo -n "--commit ${{github.sha}} --commitmessage \"$(git log -1 --pretty='%s')\" --date $(git log -1 --date=iso-strict --pretty='%ad') --vcstype git --vcsuri github.com/${{github.repository}} " >> rearm_command
    - name: Submit metadata to Rearm
      shell: bash
      run: |
        cd ${{ inputs.path }}
        # Generate SBOMs if Enabled
        if [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.source_code_sbom_type}} == 'npm' ]]
        then
          npm install --global @cyclonedx/cyclonedx-npm
          npm install
          cyclonedx-npm > fs.cdx.bom.json
          du -h ./fs.cdx.bom.json
          echo -n "--scearts '[{\"bomFormat\": \"CYCLONEDX\",\"type\": \"BOM\",\"filePath\": \"./fs.cdx.bom.json\"}]' " >> rearm_command
        elif [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.source_code_sbom_type}} == 'helm' ]]
        then
          cdxgen ./ --project-version "${{ inputs.rearm_full_version }}" -t helm -o fs.cdx.bom.json
          du -h ./fs.cdx.bom.json
          echo -n "--scearts '[{\"bomFormat\": \"CYCLONEDX\",\"type\": \"BOM\",\"filePath\": \"./fs.cdx.bom.json\"}]' " >> rearm_command
        elif [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.source_code_sbom_type}} == 'other' ]]
        then
          export FETCH_LICENSE=true
          cdxgen ./ --project-version "${{ inputs.rearm_full_version }}" -o fs.cdx.bom.json
          du -h ./fs.cdx.bom.json
          echo -n "--scearts '[{\"bomFormat\": \"CYCLONEDX\",\"type\": \"BOM\",\"filePath\": \"./fs.cdx.bom.json\"}]' " >> rearm_command
        fi
        
        if [[ ${{inputs.enable_sbom}} == 'true' && ${{inputs.deliverable_type}} == 'CONTAINER' ]]
        then
          export FETCH_LICENSE=true
          # export CDXGEN_DEBUG_MODE=debug
          cdxgen docker-${{inputs.rearm_short_version}}.tar -t docker --project-version "${{ inputs.rearm_full_version }}" -o docker.cdx.bom.json
          # docker run --rm -v $(pwd):/app:rw ghcr.io/cyclonedx/cdxgen@sha256:a586408a729ec186e747d54415a787c095b2ff19640f29c0d1788ec4f9fea482 /app/docker-${{inputs.rearm_short_version}}.tar -t docker -o /app/docker.cdx.bom.json
          ls
          du -h ./docker.cdx.bom.json
          echo -n "--odelartsjson '[{\"bomFormat\": \"CYCLONEDX\",\"type\": \"BOM\",\"filePath\": \"./docker.cdx.bom.json\"},{\"type\": \"SIGNED_PAYLOAD\",\"filePath\": \"./deliverable-cosign.sigpl\"},{\"type\": \"SIGNATURE\",\"filePath\": \"./deliverable-cosign.sig\"},{\"type\": \"CERTIFICATE_X_509\",\"filePath\": \"./deliverable-cosign.cert\"}]' " >> rearm_command
        fi
        echo -n "-b ${{github.ref_name}} -k ${{ inputs.rearm_api_key }} \
          -i ${{ inputs.rearm_api_id }} -u ${{ inputs.rearm_api_url }} \
          -v \"${{ inputs.rearm_full_version }}\" " >> rearm_command
        echo -n "--odelid ${{inputs.image_full_name}} " >> rearm_command
        echo -n "--odelbuildid github${{github.action}}${{github.sha}} " >> rearm_command
        echo -n "--odelbuilduri https://github.com/${{github.repository}}/actions/runs/${{github.run_id}} " >> rearm_command
        echo -n '--odelcimeta "GitHub Actions" ' >> rearm_command
        echo -n "--odeltype ${{inputs.deliverable_type}} " >> rearm_command

        if [[ ${{inputs.image_digest}} != "" ]]
        then
          echo -n "--odeldigests ${{inputs.image_digest}} " >> rearm_command
        fi
        if [ ! -z ${{inputs.rearm_component_id}} ]
        then
          echo -n "--component ${{inputs.rearm_component_id}} " >> rearm_command
        fi
        echo -n "--datestart ${{inputs.rearm_build_start}} " >> rearm_command
        echo -n "--dateend $(date -Iseconds) " >> rearm_command
        # debug
        cat rearm_command
        # send data
        echo rearm addrelease $(cat rearm_command) > rlz_cmd_exec
        eval $(cat rlz_cmd_exec)
        echo "completed sending release metadata"

    - name: Fail build if rearm status is rejected
      shell: bash
      run: |
        echo "checking build status..."
        cd ${{ inputs.path }}
        if [[ "${{inputs.rearm_build_status}}" == "REJECTED" ]]
        then
          echo "Failing build since Rearm build Lifecycle is rejected"
          exit 1
        fi
